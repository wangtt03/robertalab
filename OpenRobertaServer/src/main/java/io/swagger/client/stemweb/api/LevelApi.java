/*
 * stemgarden api
 * stemgarden api
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.stemweb.api;

import io.swagger.client.stemweb.ApiCallback;
import io.swagger.client.stemweb.ApiClient;
import io.swagger.client.stemweb.ApiException;
import io.swagger.client.stemweb.ApiResponse;
import io.swagger.client.stemweb.Configuration;
import io.swagger.client.stemweb.Pair;
import io.swagger.client.stemweb.ProgressRequestBody;
import io.swagger.client.stemweb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.stemweb.model.LevelCodeCamp;
import io.swagger.client.stemweb.model.LevelCodeOrg;
import io.swagger.client.stemweb.model.LevelItem;
import io.swagger.client.stemweb.model.LevelQuiz;
import io.swagger.client.stemweb.model.LevelRobertalab;
import io.swagger.client.stemweb.model.LevelVideo;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LevelApi {
    private ApiClient apiClient;

    public LevelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LevelApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getLevelByRelativePath
     * @param lessonId id of the lesson (required)
     * @param lessonStageId relative id of stage related to the lesson (required)
     * @param stageSubstageId relative id of stage related to its substage (required)
     * @param stageLevelId relative id of level related to the stage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelByRelativePathCall(UUID lessonId, Long lessonStageId, Long stageSubstageId, Long stageLevelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/findByRelativePath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (lessonId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lesson_id", lessonId));
        if (lessonStageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lesson_stage_id", lessonStageId));
        if (stageSubstageId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stage_substage_id", stageSubstageId));
        if (stageLevelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "stage_level_id", stageLevelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelByRelativePathValidateBeforeCall(UUID lessonId, Long lessonStageId, Long stageSubstageId, Long stageLevelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling getLevelByRelativePath(Async)");
        }
        
        // verify the required parameter 'lessonStageId' is set
        if (lessonStageId == null) {
            throw new ApiException("Missing the required parameter 'lessonStageId' when calling getLevelByRelativePath(Async)");
        }
        
        // verify the required parameter 'stageSubstageId' is set
        if (stageSubstageId == null) {
            throw new ApiException("Missing the required parameter 'stageSubstageId' when calling getLevelByRelativePath(Async)");
        }
        
        // verify the required parameter 'stageLevelId' is set
        if (stageLevelId == null) {
            throw new ApiException("Missing the required parameter 'stageLevelId' when calling getLevelByRelativePath(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelByRelativePathCall(lessonId, lessonStageId, stageSubstageId, stageLevelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level by lesson_id, lesson_stage_id , stage_substage_id, and stage_level_id
     * Get level by lesson_id, lesson_stage_id , stage_substage_id and stage_level_id. 
     * @param lessonId id of the lesson (required)
     * @param lessonStageId relative id of stage related to the lesson (required)
     * @param stageSubstageId relative id of stage related to its substage (required)
     * @param stageLevelId relative id of level related to the stage (required)
     * @return List&lt;LevelItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LevelItem> getLevelByRelativePath(UUID lessonId, Long lessonStageId, Long stageSubstageId, Long stageLevelId) throws ApiException {
        ApiResponse<List<LevelItem>> resp = getLevelByRelativePathWithHttpInfo(lessonId, lessonStageId, stageSubstageId, stageLevelId);
        return resp.getData();
    }

    /**
     * get level by lesson_id, lesson_stage_id , stage_substage_id, and stage_level_id
     * Get level by lesson_id, lesson_stage_id , stage_substage_id and stage_level_id. 
     * @param lessonId id of the lesson (required)
     * @param lessonStageId relative id of stage related to the lesson (required)
     * @param stageSubstageId relative id of stage related to its substage (required)
     * @param stageLevelId relative id of level related to the stage (required)
     * @return ApiResponse&lt;List&lt;LevelItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LevelItem>> getLevelByRelativePathWithHttpInfo(UUID lessonId, Long lessonStageId, Long stageSubstageId, Long stageLevelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelByRelativePathValidateBeforeCall(lessonId, lessonStageId, stageSubstageId, stageLevelId, null, null);
        Type localVarReturnType = new TypeToken<List<LevelItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level by lesson_id, lesson_stage_id , stage_substage_id, and stage_level_id (asynchronously)
     * Get level by lesson_id, lesson_stage_id , stage_substage_id and stage_level_id. 
     * @param lessonId id of the lesson (required)
     * @param lessonStageId relative id of stage related to the lesson (required)
     * @param stageSubstageId relative id of stage related to its substage (required)
     * @param stageLevelId relative id of level related to the stage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelByRelativePathAsync(UUID lessonId, Long lessonStageId, Long stageSubstageId, Long stageLevelId, final ApiCallback<List<LevelItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelByRelativePathValidateBeforeCall(lessonId, lessonStageId, stageSubstageId, stageLevelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LevelItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLevelCodeCampById
     * @param levelId id of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelCodeCampByIdCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/levelCodeCamp/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (levelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level_id", levelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelCodeCampByIdValidateBeforeCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getLevelCodeCampById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelCodeCampByIdCall(levelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level_code_camp by level_id
     * Get level_code_camp by level_id. 
     * @param levelId id of level (required)
     * @return List&lt;LevelCodeCamp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LevelCodeCamp> getLevelCodeCampById(UUID levelId) throws ApiException {
        ApiResponse<List<LevelCodeCamp>> resp = getLevelCodeCampByIdWithHttpInfo(levelId);
        return resp.getData();
    }

    /**
     * get level_code_camp by level_id
     * Get level_code_camp by level_id. 
     * @param levelId id of level (required)
     * @return ApiResponse&lt;List&lt;LevelCodeCamp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LevelCodeCamp>> getLevelCodeCampByIdWithHttpInfo(UUID levelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelCodeCampByIdValidateBeforeCall(levelId, null, null);
        Type localVarReturnType = new TypeToken<List<LevelCodeCamp>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level_code_camp by level_id (asynchronously)
     * Get level_code_camp by level_id. 
     * @param levelId id of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelCodeCampByIdAsync(UUID levelId, final ApiCallback<List<LevelCodeCamp>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelCodeCampByIdValidateBeforeCall(levelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LevelCodeCamp>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLevelCodeOrgById
     * @param levelId id of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelCodeOrgByIdCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/levelCodeOrg/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (levelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level_id", levelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelCodeOrgByIdValidateBeforeCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getLevelCodeOrgById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelCodeOrgByIdCall(levelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level_code_org by level_id
     * Get level_code_org by level_id. 
     * @param levelId id of level (required)
     * @return List&lt;LevelCodeOrg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LevelCodeOrg> getLevelCodeOrgById(UUID levelId) throws ApiException {
        ApiResponse<List<LevelCodeOrg>> resp = getLevelCodeOrgByIdWithHttpInfo(levelId);
        return resp.getData();
    }

    /**
     * get level_code_org by level_id
     * Get level_code_org by level_id. 
     * @param levelId id of level (required)
     * @return ApiResponse&lt;List&lt;LevelCodeOrg&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LevelCodeOrg>> getLevelCodeOrgByIdWithHttpInfo(UUID levelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelCodeOrgByIdValidateBeforeCall(levelId, null, null);
        Type localVarReturnType = new TypeToken<List<LevelCodeOrg>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level_code_org by level_id (asynchronously)
     * Get level_code_org by level_id. 
     * @param levelId id of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelCodeOrgByIdAsync(UUID levelId, final ApiCallback<List<LevelCodeOrg>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelCodeOrgByIdValidateBeforeCall(levelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LevelCodeOrg>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLevelQuizById
     * @param levelId id of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelQuizByIdCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/levelQuiz/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (levelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level_id", levelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelQuizByIdValidateBeforeCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getLevelQuizById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelQuizByIdCall(levelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level_quiz by level_id
     * Get level_quiz by level_id. 
     * @param levelId id of level (required)
     * @return List&lt;LevelQuiz&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LevelQuiz> getLevelQuizById(UUID levelId) throws ApiException {
        ApiResponse<List<LevelQuiz>> resp = getLevelQuizByIdWithHttpInfo(levelId);
        return resp.getData();
    }

    /**
     * get level_quiz by level_id
     * Get level_quiz by level_id. 
     * @param levelId id of level (required)
     * @return ApiResponse&lt;List&lt;LevelQuiz&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LevelQuiz>> getLevelQuizByIdWithHttpInfo(UUID levelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelQuizByIdValidateBeforeCall(levelId, null, null);
        Type localVarReturnType = new TypeToken<List<LevelQuiz>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level_quiz by level_id (asynchronously)
     * Get level_quiz by level_id. 
     * @param levelId id of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelQuizByIdAsync(UUID levelId, final ApiCallback<List<LevelQuiz>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelQuizByIdValidateBeforeCall(levelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LevelQuiz>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLevelRobertaById
     * @param levelId id of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelRobertaByIdCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/levelRoberta/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (levelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level_id", levelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelRobertaByIdValidateBeforeCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getLevelRobertaById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelRobertaByIdCall(levelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level_roberta by level_id
     * Get level_roberta by level_id. 
     * @param levelId id of level (required)
     * @return LevelRobertalab
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LevelRobertalab getLevelRobertaById(UUID levelId) throws ApiException {
        ApiResponse<LevelRobertalab> resp = getLevelRobertaByIdWithHttpInfo(levelId);
        return resp.getData();
    }

    /**
     * get level_roberta by level_id
     * Get level_roberta by level_id. 
     * @param levelId id of level (required)
     * @return ApiResponse&lt;LevelRobertalab&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LevelRobertalab> getLevelRobertaByIdWithHttpInfo(UUID levelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelRobertaByIdValidateBeforeCall(levelId, null, null);
        Type localVarReturnType = new TypeToken<LevelRobertalab>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level_roberta by level_id (asynchronously)
     * Get level_roberta by level_id. 
     * @param levelId id of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelRobertaByIdAsync(UUID levelId, final ApiCallback<LevelRobertalab> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelRobertaByIdValidateBeforeCall(levelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LevelRobertalab>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLevelVideoById
     * @param levelId id of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLevelVideoByIdCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/level/levelVideo/findById";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (levelId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "level_id", levelId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLevelVideoByIdValidateBeforeCall(UUID levelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'levelId' is set
        if (levelId == null) {
            throw new ApiException("Missing the required parameter 'levelId' when calling getLevelVideoById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLevelVideoByIdCall(levelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get level_video by level_id
     * Get level_video by level_id. 
     * @param levelId id of level (required)
     * @return List&lt;LevelVideo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LevelVideo> getLevelVideoById(UUID levelId) throws ApiException {
        ApiResponse<List<LevelVideo>> resp = getLevelVideoByIdWithHttpInfo(levelId);
        return resp.getData();
    }

    /**
     * get level_video by level_id
     * Get level_video by level_id. 
     * @param levelId id of level (required)
     * @return ApiResponse&lt;List&lt;LevelVideo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LevelVideo>> getLevelVideoByIdWithHttpInfo(UUID levelId) throws ApiException {
        com.squareup.okhttp.Call call = getLevelVideoByIdValidateBeforeCall(levelId, null, null);
        Type localVarReturnType = new TypeToken<List<LevelVideo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get level_video by level_id (asynchronously)
     * Get level_video by level_id. 
     * @param levelId id of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLevelVideoByIdAsync(UUID levelId, final ApiCallback<List<LevelVideo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLevelVideoByIdValidateBeforeCall(levelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LevelVideo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
