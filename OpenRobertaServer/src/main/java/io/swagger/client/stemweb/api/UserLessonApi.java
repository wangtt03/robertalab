/*
 * stemgarden api
 * stemgarden api
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.stemweb.api;

import io.swagger.client.stemweb.ApiCallback;
import io.swagger.client.stemweb.ApiClient;
import io.swagger.client.stemweb.ApiException;
import io.swagger.client.stemweb.ApiResponse;
import io.swagger.client.stemweb.Configuration;
import io.swagger.client.stemweb.Pair;
import io.swagger.client.stemweb.ProgressRequestBody;
import io.swagger.client.stemweb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.UUID;
import io.swagger.client.stemweb.model.User;
import io.swagger.client.stemweb.model.UserLesson;
import io.swagger.client.stemweb.model.UserLessonGrantBadge;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserLessonApi {
    private ApiClient apiClient;

    public UserLessonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserLessonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNewUserLessonStatus
     * @param body user lesson status parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNewUserLessonStatusCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/userLesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewUserLessonStatusValidateBeforeCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewUserLessonStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewUserLessonStatusCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add New User Lesson Status
     * add New User Lesson Status
     * @param body user lesson status parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNewUserLessonStatus(UserLesson body) throws ApiException {
        addNewUserLessonStatusWithHttpInfo(body);
    }

    /**
     * add New User Lesson Status
     * add New User Lesson Status
     * @param body user lesson status parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNewUserLessonStatusWithHttpInfo(UserLesson body) throws ApiException {
        com.squareup.okhttp.Call call = addNewUserLessonStatusValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * add New User Lesson Status (asynchronously)
     * add New User Lesson Status
     * @param body user lesson status parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewUserLessonStatusAsync(UserLesson body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewUserLessonStatusValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUserLessonStatus
     * @param body user lesson status parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUserLessonStatusCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/userLesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUserLessonStatusValidateBeforeCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteUserLessonStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteUserLessonStatusCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * delete User Lesson Status
     * delete User Lesson Status
     * @param body user lesson status parameters (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUserLessonStatus(UserLesson body) throws ApiException {
        deleteUserLessonStatusWithHttpInfo(body);
    }

    /**
     * delete User Lesson Status
     * delete User Lesson Status
     * @param body user lesson status parameters (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUserLessonStatusWithHttpInfo(UserLesson body) throws ApiException {
        com.squareup.okhttp.Call call = deleteUserLessonStatusValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * delete User Lesson Status (asynchronously)
     * delete User Lesson Status
     * @param body user lesson status parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUserLessonStatusAsync(UserLesson body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUserLessonStatusValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getUserLessonStatus
     * @param body user lesson status parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserLessonStatusCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/userLesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserLessonStatusValidateBeforeCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getUserLessonStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserLessonStatusCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get user lesson status
     * get user lesson status
     * @param body user lesson status parameters (required)
     * @return UserLesson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserLesson getUserLessonStatus(UserLesson body) throws ApiException {
        ApiResponse<UserLesson> resp = getUserLessonStatusWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * get user lesson status
     * get user lesson status
     * @param body user lesson status parameters (required)
     * @return ApiResponse&lt;UserLesson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserLesson> getUserLessonStatusWithHttpInfo(UserLesson body) throws ApiException {
        com.squareup.okhttp.Call call = getUserLessonStatusValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get user lesson status (asynchronously)
     * get user lesson status
     * @param body user lesson status parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserLessonStatusAsync(UserLesson body, final ApiCallback<UserLesson> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserLessonStatusValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for grantBadge
     * @param body contains UserID, LessonID and BadgeID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call grantBadgeCall(UserLessonGrantBadge body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/userLesson/grantBadge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call grantBadgeValidateBeforeCall(UserLessonGrantBadge body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling grantBadge(Async)");
        }
        
        
        com.squareup.okhttp.Call call = grantBadgeCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * grant badge for a user in a specific lesson
     * grant badge for a user in a specific lesson
     * @param body contains UserID, LessonID and BadgeID (required)
     * @return UserLesson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserLesson grantBadge(UserLessonGrantBadge body) throws ApiException {
        ApiResponse<UserLesson> resp = grantBadgeWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * grant badge for a user in a specific lesson
     * grant badge for a user in a specific lesson
     * @param body contains UserID, LessonID and BadgeID (required)
     * @return ApiResponse&lt;UserLesson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserLesson> grantBadgeWithHttpInfo(UserLessonGrantBadge body) throws ApiException {
        com.squareup.okhttp.Call call = grantBadgeValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * grant badge for a user in a specific lesson (asynchronously)
     * grant badge for a user in a specific lesson
     * @param body contains UserID, LessonID and BadgeID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call grantBadgeAsync(UserLessonGrantBadge body, final ApiCallback<UserLesson> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = grantBadgeValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLevelStatus
     * @param userID ID of user that needs to be updated (required)
     * @param lessonID  (required)
     * @param stageID  (required)
     * @param substageID  (required)
     * @param levelID  (required)
     * @param levelStatus Updated the status of level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLevelStatusCall(UUID userID, UUID lessonID, UUID stageID, UUID substageID, UUID levelID, Integer levelStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/userLesson/{userID}/{lessonID}"
            .replaceAll("\\{" + "userID" + "\\}", apiClient.escapeString(userID.toString()))
            .replaceAll("\\{" + "lessonID" + "\\}", apiClient.escapeString(lessonID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stageID != null)
        localVarFormParams.put("stageID", stageID);
        if (substageID != null)
        localVarFormParams.put("substageID", substageID);
        if (levelID != null)
        localVarFormParams.put("levelID", levelID);
        if (levelStatus != null)
        localVarFormParams.put("levelStatus", levelStatus);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLevelStatusValidateBeforeCall(UUID userID, UUID lessonID, UUID stageID, UUID substageID, UUID levelID, Integer levelStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling updateLevelStatus(Async)");
        }
        
        // verify the required parameter 'lessonID' is set
        if (lessonID == null) {
            throw new ApiException("Missing the required parameter 'lessonID' when calling updateLevelStatus(Async)");
        }
        
        // verify the required parameter 'stageID' is set
        if (stageID == null) {
            throw new ApiException("Missing the required parameter 'stageID' when calling updateLevelStatus(Async)");
        }
        
        // verify the required parameter 'substageID' is set
        if (substageID == null) {
            throw new ApiException("Missing the required parameter 'substageID' when calling updateLevelStatus(Async)");
        }
        
        // verify the required parameter 'levelID' is set
        if (levelID == null) {
            throw new ApiException("Missing the required parameter 'levelID' when calling updateLevelStatus(Async)");
        }
        
        // verify the required parameter 'levelStatus' is set
        if (levelStatus == null) {
            throw new ApiException("Missing the required parameter 'levelStatus' when calling updateLevelStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLevelStatusCall(userID, lessonID, stageID, substageID, levelID, levelStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the level status with form data
     * 
     * @param userID ID of user that needs to be updated (required)
     * @param lessonID  (required)
     * @param stageID  (required)
     * @param substageID  (required)
     * @param levelID  (required)
     * @param levelStatus Updated the status of level (required)
     * @return UserLesson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserLesson updateLevelStatus(UUID userID, UUID lessonID, UUID stageID, UUID substageID, UUID levelID, Integer levelStatus) throws ApiException {
        ApiResponse<UserLesson> resp = updateLevelStatusWithHttpInfo(userID, lessonID, stageID, substageID, levelID, levelStatus);
        return resp.getData();
    }

    /**
     * Updates the level status with form data
     * 
     * @param userID ID of user that needs to be updated (required)
     * @param lessonID  (required)
     * @param stageID  (required)
     * @param substageID  (required)
     * @param levelID  (required)
     * @param levelStatus Updated the status of level (required)
     * @return ApiResponse&lt;UserLesson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserLesson> updateLevelStatusWithHttpInfo(UUID userID, UUID lessonID, UUID stageID, UUID substageID, UUID levelID, Integer levelStatus) throws ApiException {
        com.squareup.okhttp.Call call = updateLevelStatusValidateBeforeCall(userID, lessonID, stageID, substageID, levelID, levelStatus, null, null);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the level status with form data (asynchronously)
     * 
     * @param userID ID of user that needs to be updated (required)
     * @param lessonID  (required)
     * @param stageID  (required)
     * @param substageID  (required)
     * @param levelID  (required)
     * @param levelStatus Updated the status of level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLevelStatusAsync(UUID userID, UUID lessonID, UUID stageID, UUID substageID, UUID levelID, Integer levelStatus, final ApiCallback<UserLesson> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLevelStatusValidateBeforeCall(userID, lessonID, stageID, substageID, levelID, levelStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserLesson>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUserLessonStatus
     * @param body user lesson status parameters (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserLessonStatusCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/userLesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserLessonStatusValidateBeforeCall(UserLesson body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateUserLessonStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserLessonStatusCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * update User Lesson Status
     * update User Lesson Status
     * @param body user lesson status parameters (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User updateUserLessonStatus(UserLesson body) throws ApiException {
        ApiResponse<User> resp = updateUserLessonStatusWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * update User Lesson Status
     * update User Lesson Status
     * @param body user lesson status parameters (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> updateUserLessonStatusWithHttpInfo(UserLesson body) throws ApiException {
        com.squareup.okhttp.Call call = updateUserLessonStatusValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * update User Lesson Status (asynchronously)
     * update User Lesson Status
     * @param body user lesson status parameters (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserLessonStatusAsync(UserLesson body, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserLessonStatusValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
