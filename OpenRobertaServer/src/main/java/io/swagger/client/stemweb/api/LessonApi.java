/*
 * stemgarden api
 * stemgarden api
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.stemweb.api;

import io.swagger.client.stemweb.ApiCallback;
import io.swagger.client.stemweb.ApiClient;
import io.swagger.client.stemweb.ApiException;
import io.swagger.client.stemweb.ApiResponse;
import io.swagger.client.stemweb.Configuration;
import io.swagger.client.stemweb.Pair;
import io.swagger.client.stemweb.ProgressRequestBody;
import io.swagger.client.stemweb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.stemweb.model.LessonItem;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LessonApi {
    private ApiClient apiClient;

    public LessonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LessonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addNewLesson
     * @param body add new lesson (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addNewLessonCall(LessonItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/lesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addNewLessonValidateBeforeCall(LessonItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewLesson(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addNewLessonCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * add a new lesson
     * add a new lesson
     * @param body add new lesson (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addNewLesson(LessonItem body) throws ApiException {
        addNewLessonWithHttpInfo(body);
    }

    /**
     * add a new lesson
     * add a new lesson
     * @param body add new lesson (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addNewLessonWithHttpInfo(LessonItem body) throws ApiException {
        com.squareup.okhttp.Call call = addNewLessonValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * add a new lesson (asynchronously)
     * add a new lesson
     * @param body add new lesson (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addNewLessonAsync(LessonItem body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addNewLessonValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteLessonById
     * @param lessonId Lesson id to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLessonByIdCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/{lessonId}"
            .replaceAll("\\{" + "lessonId" + "\\}", apiClient.escapeString(lessonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLessonByIdValidateBeforeCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling deleteLessonById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteLessonByIdCall(lessonId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a lesson
     * 
     * @param lessonId Lesson id to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLessonById(UUID lessonId) throws ApiException {
        deleteLessonByIdWithHttpInfo(lessonId);
    }

    /**
     * Deletes a lesson
     * 
     * @param lessonId Lesson id to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLessonByIdWithHttpInfo(UUID lessonId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLessonByIdValidateBeforeCall(lessonId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a lesson (asynchronously)
     * 
     * @param lessonId Lesson id to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLessonByIdAsync(UUID lessonId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLessonByIdValidateBeforeCall(lessonId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getLessonById
     * @param lessonId id of the lesson (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLessonByIdCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/{lessonId}"
            .replaceAll("\\{" + "lessonId" + "\\}", apiClient.escapeString(lessonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLessonByIdValidateBeforeCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling getLessonById(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLessonByIdCall(lessonId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get lesson by id
     * Get lesson by id. 
     * @param lessonId id of the lesson (required)
     * @return LessonItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LessonItem getLessonById(UUID lessonId) throws ApiException {
        ApiResponse<LessonItem> resp = getLessonByIdWithHttpInfo(lessonId);
        return resp.getData();
    }

    /**
     * get lesson by id
     * Get lesson by id. 
     * @param lessonId id of the lesson (required)
     * @return ApiResponse&lt;LessonItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LessonItem> getLessonByIdWithHttpInfo(UUID lessonId) throws ApiException {
        com.squareup.okhttp.Call call = getLessonByIdValidateBeforeCall(lessonId, null, null);
        Type localVarReturnType = new TypeToken<LessonItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get lesson by id (asynchronously)
     * Get lesson by id. 
     * @param lessonId id of the lesson (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLessonByIdAsync(UUID lessonId, final ApiCallback<LessonItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLessonByIdValidateBeforeCall(lessonId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LessonItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLessonListByAgeRange
     * @param ageRange types to filter by (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLessonListByAgeRangeCall(UUID ageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/findByAgeRange";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (ageRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ageRange", ageRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLessonListByAgeRangeValidateBeforeCall(UUID ageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ageRange' is set
        if (ageRange == null) {
            throw new ApiException("Missing the required parameter 'ageRange' when calling getLessonListByAgeRange(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLessonListByAgeRangeCall(ageRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get lesson list by age range
     * Get all lessons by age range. 
     * @param ageRange types to filter by (required)
     * @return List&lt;LessonItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LessonItem> getLessonListByAgeRange(UUID ageRange) throws ApiException {
        ApiResponse<List<LessonItem>> resp = getLessonListByAgeRangeWithHttpInfo(ageRange);
        return resp.getData();
    }

    /**
     * get lesson list by age range
     * Get all lessons by age range. 
     * @param ageRange types to filter by (required)
     * @return ApiResponse&lt;List&lt;LessonItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LessonItem>> getLessonListByAgeRangeWithHttpInfo(UUID ageRange) throws ApiException {
        com.squareup.okhttp.Call call = getLessonListByAgeRangeValidateBeforeCall(ageRange, null, null);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get lesson list by age range (asynchronously)
     * Get all lessons by age range. 
     * @param ageRange types to filter by (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLessonListByAgeRangeAsync(UUID ageRange, final ApiCallback<List<LessonItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLessonListByAgeRangeValidateBeforeCall(ageRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLessonListByCategory
     * @param category category to filter by (required)
     * @param startPage  (optional)
     * @param endPage  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLessonListByCategoryCall(UUID category, Long startPage, Long endPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/findByCategory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startPage", startPage));
        if (endPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endPage", endPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLessonListByCategoryValidateBeforeCall(UUID category, Long startPage, Long endPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getLessonListByCategory(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLessonListByCategoryCall(category, startPage, endPage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get lesson list by category
     * Get all lessons by category. 
     * @param category category to filter by (required)
     * @param startPage  (optional)
     * @param endPage  (optional)
     * @return List&lt;LessonItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LessonItem> getLessonListByCategory(UUID category, Long startPage, Long endPage) throws ApiException {
        ApiResponse<List<LessonItem>> resp = getLessonListByCategoryWithHttpInfo(category, startPage, endPage);
        return resp.getData();
    }

    /**
     * get lesson list by category
     * Get all lessons by category. 
     * @param category category to filter by (required)
     * @param startPage  (optional)
     * @param endPage  (optional)
     * @return ApiResponse&lt;List&lt;LessonItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LessonItem>> getLessonListByCategoryWithHttpInfo(UUID category, Long startPage, Long endPage) throws ApiException {
        com.squareup.okhttp.Call call = getLessonListByCategoryValidateBeforeCall(category, startPage, endPage, null, null);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get lesson list by category (asynchronously)
     * Get all lessons by category. 
     * @param category category to filter by (required)
     * @param startPage  (optional)
     * @param endPage  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLessonListByCategoryAsync(UUID category, Long startPage, Long endPage, final ApiCallback<List<LessonItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLessonListByCategoryValidateBeforeCall(category, startPage, endPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLessonListByType
     * @param type types to filter by (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLessonListByTypeCall(UUID type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/findByType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLessonListByTypeValidateBeforeCall(UUID type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getLessonListByType(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLessonListByTypeCall(type, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get lesson list by type
     * Get all lessons by type. 
     * @param type types to filter by (required)
     * @return List&lt;LessonItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LessonItem> getLessonListByType(UUID type) throws ApiException {
        ApiResponse<List<LessonItem>> resp = getLessonListByTypeWithHttpInfo(type);
        return resp.getData();
    }

    /**
     * get lesson list by type
     * Get all lessons by type. 
     * @param type types to filter by (required)
     * @return ApiResponse&lt;List&lt;LessonItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LessonItem>> getLessonListByTypeWithHttpInfo(UUID type) throws ApiException {
        com.squareup.okhttp.Call call = getLessonListByTypeValidateBeforeCall(type, null, null);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get lesson list by type (asynchronously)
     * Get all lessons by type. 
     * @param type types to filter by (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLessonListByTypeAsync(UUID type, final ApiCallback<List<LessonItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLessonListByTypeValidateBeforeCall(type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LessonItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStageAndLevelByID
     * @param lessonId id to filter by (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStageAndLevelByIDCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/stageLevel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (lessonId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lesson_id", lessonId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStageAndLevelByIDValidateBeforeCall(UUID lessonId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling getStageAndLevelByID(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStageAndLevelByIDCall(lessonId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get lesson list by age range
     * Get all stage and level by lesson id. 
     * @param lessonId id to filter by (required)
     * @return LessonItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LessonItem getStageAndLevelByID(UUID lessonId) throws ApiException {
        ApiResponse<LessonItem> resp = getStageAndLevelByIDWithHttpInfo(lessonId);
        return resp.getData();
    }

    /**
     * get lesson list by age range
     * Get all stage and level by lesson id. 
     * @param lessonId id to filter by (required)
     * @return ApiResponse&lt;LessonItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LessonItem> getStageAndLevelByIDWithHttpInfo(UUID lessonId) throws ApiException {
        com.squareup.okhttp.Call call = getStageAndLevelByIDValidateBeforeCall(lessonId, null, null);
        Type localVarReturnType = new TypeToken<LessonItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get lesson list by age range (asynchronously)
     * Get all stage and level by lesson id. 
     * @param lessonId id to filter by (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStageAndLevelByIDAsync(UUID lessonId, final ApiCallback<LessonItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStageAndLevelByIDValidateBeforeCall(lessonId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LessonItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLesson
     * @param body Lesson object that needs to be added to the store (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLessonCall(LessonItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/lesson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLessonValidateBeforeCall(LessonItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLesson(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLessonCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an existing lesson
     * 
     * @param body Lesson object that needs to be added to the store (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLesson(LessonItem body) throws ApiException {
        updateLessonWithHttpInfo(body);
    }

    /**
     * Update an existing lesson
     * 
     * @param body Lesson object that needs to be added to the store (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLessonWithHttpInfo(LessonItem body) throws ApiException {
        com.squareup.okhttp.Call call = updateLessonValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an existing lesson (asynchronously)
     * 
     * @param body Lesson object that needs to be added to the store (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLessonAsync(LessonItem body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLessonValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateLessonWithForm
     * @param lessonId ID of lesson that needs to be updated (required)
     * @param name Updated name of the lesson (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLessonWithFormCall(UUID lessonId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/lesson/{lessonId}"
            .replaceAll("\\{" + "lessonId" + "\\}", apiClient.escapeString(lessonId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLessonWithFormValidateBeforeCall(UUID lessonId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling updateLessonWithForm(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateLessonWithFormCall(lessonId, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates a lesson in the store with form data
     * 
     * @param lessonId ID of lesson that needs to be updated (required)
     * @param name Updated name of the lesson (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateLessonWithForm(UUID lessonId, String name) throws ApiException {
        updateLessonWithFormWithHttpInfo(lessonId, name);
    }

    /**
     * Updates a lesson in the store with form data
     * 
     * @param lessonId ID of lesson that needs to be updated (required)
     * @param name Updated name of the lesson (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateLessonWithFormWithHttpInfo(UUID lessonId, String name) throws ApiException {
        com.squareup.okhttp.Call call = updateLessonWithFormValidateBeforeCall(lessonId, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a lesson in the store with form data (asynchronously)
     * 
     * @param lessonId ID of lesson that needs to be updated (required)
     * @param name Updated name of the lesson (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLessonWithFormAsync(UUID lessonId, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLessonWithFormValidateBeforeCall(lessonId, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
